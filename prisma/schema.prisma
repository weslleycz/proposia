// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  passwordHash String
  role         Role
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  proposals   Proposal[]
  ProposalLog ProposalLog[]
}

model Client {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  cnpjCpf   String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  proposals Proposal[]
}

model Proposal {
  id          String         @id @default(cuid())
  title       String
  description String?
  totalAmount Int
  status      ProposalStatus
  version     Int            @default(1)
  pdfUrl      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId   String
  clientId String
  user     User           @relation(fields: [userId], references: [id])
  client   Client         @relation(fields: [clientId], references: [id])
  items    ProposalItem[]

  parentId    String?
  parent      Proposal?     @relation("ProposalVersions", fields: [parentId], references: [id])
  versions    Proposal[]    @relation("ProposalVersions")
  ProposalLog ProposalLog[]
}

model ProposalItem {
  id          String @id @default(cuid())
  description String
  quantity    Int
  unitPrice   Int
  total       Int

  proposalId String
  proposal   Proposal @relation(fields: [proposalId], references: [id])
}

model ProposalLog {
  id         String   @id @default(cuid())
  proposalId String
  proposal   Proposal @relation(fields: [proposalId], references: [id])

  changedById String
  changedBy   User   @relation(fields: [changedById], references: [id])

  action  ProposalAction 
  oldData Json?
  newData Json?

  createdAt DateTime @default(now())
}

enum ProposalAction {
  CREATED
  UPDATED
  STATUS_CHANGED
  VERSIONED
  DELETED
}

enum Role {
  ADMIN
  SALESPERSON
}

enum ProposalStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
}
